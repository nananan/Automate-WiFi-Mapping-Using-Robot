"""autogenerated by genpy from corobot_msgs/MotorCommand.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorCommand(genpy.Message):
  _md5sum = "451c087bf7cd0b5ee063409877e152e9"
  _type = "corobot_msgs/MotorCommand"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Bill Mania <bmania@coroware.com>
#
# Service used with the CoroWare CoroBot to move the robot
# base. Originally developed for the Phidget HC Motor Controller
#
# leftSpeed and rightSpeed are signed integers which specify the
# combined speed and direction to rotate the wheels on each side
# of the robot. 0 indicates full stop. positive integers indicate
# a forward rotation and larger integers indicate a higher
# rotational speed.
#
int16 leftSpeed
int16 rightSpeed
#
# when at least one of leftSpeed or rightSpeed is non-zero,
# secondsDuration indicates for how many seconds to rotate those
# wheels at the requested speed. when secondsDuration is zero,
# the wheels will be rotated at the requested speed, in the
# requested direction until another request is received.
#
uint16 secondsDuration
#
# the number of seconds over which to effect the change in
# rotational speed from the current speed to the speed requested.
# a value of zero indicates "as fast as possible". the greater
# this value, the greater amount of time taken to change the
# speed.
uint16 acceleration

"""
  __slots__ = ['leftSpeed','rightSpeed','secondsDuration','acceleration']
  _slot_types = ['int16','int16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftSpeed,rightSpeed,secondsDuration,acceleration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorCommand, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leftSpeed is None:
        self.leftSpeed = 0
      if self.rightSpeed is None:
        self.rightSpeed = 0
      if self.secondsDuration is None:
        self.secondsDuration = 0
      if self.acceleration is None:
        self.acceleration = 0
    else:
      self.leftSpeed = 0
      self.rightSpeed = 0
      self.secondsDuration = 0
      self.acceleration = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2h2H.pack(_x.leftSpeed, _x.rightSpeed, _x.secondsDuration, _x.acceleration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.leftSpeed, _x.rightSpeed, _x.secondsDuration, _x.acceleration,) = _struct_2h2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2h2H.pack(_x.leftSpeed, _x.rightSpeed, _x.secondsDuration, _x.acceleration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.leftSpeed, _x.rightSpeed, _x.secondsDuration, _x.acceleration,) = _struct_2h2H.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2h2H = struct.Struct("<2h2H")
