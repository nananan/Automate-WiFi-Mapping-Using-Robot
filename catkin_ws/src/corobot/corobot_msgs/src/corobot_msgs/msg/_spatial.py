"""autogenerated by genpy from corobot_msgs/spatial.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class spatial(genpy.Message):
  _md5sum = "88d5070ee7206e7a7c6044849f478293"
  _type = "corobot_msgs/spatial"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 acc1
float32 acc2
float32 acc3

float32 ang1
float32 ang2
float32 ang3

float32 mag1
float32 mag2
float32 mag3

"""
  __slots__ = ['acc1','acc2','acc3','ang1','ang2','ang3','mag1','mag2','mag3']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acc1,acc2,acc3,ang1,ang2,ang3,mag1,mag2,mag3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(spatial, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.acc1 is None:
        self.acc1 = 0.
      if self.acc2 is None:
        self.acc2 = 0.
      if self.acc3 is None:
        self.acc3 = 0.
      if self.ang1 is None:
        self.ang1 = 0.
      if self.ang2 is None:
        self.ang2 = 0.
      if self.ang3 is None:
        self.ang3 = 0.
      if self.mag1 is None:
        self.mag1 = 0.
      if self.mag2 is None:
        self.mag2 = 0.
      if self.mag3 is None:
        self.mag3 = 0.
    else:
      self.acc1 = 0.
      self.acc2 = 0.
      self.acc3 = 0.
      self.ang1 = 0.
      self.ang2 = 0.
      self.ang3 = 0.
      self.mag1 = 0.
      self.mag2 = 0.
      self.mag3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.acc1, _x.acc2, _x.acc3, _x.ang1, _x.ang2, _x.ang3, _x.mag1, _x.mag2, _x.mag3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.acc1, _x.acc2, _x.acc3, _x.ang1, _x.ang2, _x.ang3, _x.mag1, _x.mag2, _x.mag3,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_9f.pack(_x.acc1, _x.acc2, _x.acc3, _x.ang1, _x.ang2, _x.ang3, _x.mag1, _x.mag2, _x.mag3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 36
      (_x.acc1, _x.acc2, _x.acc3, _x.ang1, _x.ang2, _x.ang3, _x.mag1, _x.mag2, _x.mag3,) = _struct_9f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_9f = struct.Struct("<9f")
