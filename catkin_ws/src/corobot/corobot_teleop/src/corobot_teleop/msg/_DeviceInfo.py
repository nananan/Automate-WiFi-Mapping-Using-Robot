"""autogenerated by genpy from corobot_teleop/DeviceInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DeviceInfo(genpy.Message):
  _md5sum = "39b0e51aefc19552062fedb9c5674b52"
  _type = "corobot_teleop/DeviceInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool Hokuyo_attached
bool PTZcam_attached
bool REARcam_attached
bool SSC32board_attached
bool frontBumper_attached
bool backBumper_attached
bool Encoder_left_attached
bool Encoder_right_attached
bool Voltage_attached
bool IR_attached


"""
  __slots__ = ['Hokuyo_attached','PTZcam_attached','REARcam_attached','SSC32board_attached','frontBumper_attached','backBumper_attached','Encoder_left_attached','Encoder_right_attached','Voltage_attached','IR_attached']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Hokuyo_attached,PTZcam_attached,REARcam_attached,SSC32board_attached,frontBumper_attached,backBumper_attached,Encoder_left_attached,Encoder_right_attached,Voltage_attached,IR_attached

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DeviceInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Hokuyo_attached is None:
        self.Hokuyo_attached = False
      if self.PTZcam_attached is None:
        self.PTZcam_attached = False
      if self.REARcam_attached is None:
        self.REARcam_attached = False
      if self.SSC32board_attached is None:
        self.SSC32board_attached = False
      if self.frontBumper_attached is None:
        self.frontBumper_attached = False
      if self.backBumper_attached is None:
        self.backBumper_attached = False
      if self.Encoder_left_attached is None:
        self.Encoder_left_attached = False
      if self.Encoder_right_attached is None:
        self.Encoder_right_attached = False
      if self.Voltage_attached is None:
        self.Voltage_attached = False
      if self.IR_attached is None:
        self.IR_attached = False
    else:
      self.Hokuyo_attached = False
      self.PTZcam_attached = False
      self.REARcam_attached = False
      self.SSC32board_attached = False
      self.frontBumper_attached = False
      self.backBumper_attached = False
      self.Encoder_left_attached = False
      self.Encoder_right_attached = False
      self.Voltage_attached = False
      self.IR_attached = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10B.pack(_x.Hokuyo_attached, _x.PTZcam_attached, _x.REARcam_attached, _x.SSC32board_attached, _x.frontBumper_attached, _x.backBumper_attached, _x.Encoder_left_attached, _x.Encoder_right_attached, _x.Voltage_attached, _x.IR_attached))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.Hokuyo_attached, _x.PTZcam_attached, _x.REARcam_attached, _x.SSC32board_attached, _x.frontBumper_attached, _x.backBumper_attached, _x.Encoder_left_attached, _x.Encoder_right_attached, _x.Voltage_attached, _x.IR_attached,) = _struct_10B.unpack(str[start:end])
      self.Hokuyo_attached = bool(self.Hokuyo_attached)
      self.PTZcam_attached = bool(self.PTZcam_attached)
      self.REARcam_attached = bool(self.REARcam_attached)
      self.SSC32board_attached = bool(self.SSC32board_attached)
      self.frontBumper_attached = bool(self.frontBumper_attached)
      self.backBumper_attached = bool(self.backBumper_attached)
      self.Encoder_left_attached = bool(self.Encoder_left_attached)
      self.Encoder_right_attached = bool(self.Encoder_right_attached)
      self.Voltage_attached = bool(self.Voltage_attached)
      self.IR_attached = bool(self.IR_attached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10B.pack(_x.Hokuyo_attached, _x.PTZcam_attached, _x.REARcam_attached, _x.SSC32board_attached, _x.frontBumper_attached, _x.backBumper_attached, _x.Encoder_left_attached, _x.Encoder_right_attached, _x.Voltage_attached, _x.IR_attached))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.Hokuyo_attached, _x.PTZcam_attached, _x.REARcam_attached, _x.SSC32board_attached, _x.frontBumper_attached, _x.backBumper_attached, _x.Encoder_left_attached, _x.Encoder_right_attached, _x.Voltage_attached, _x.IR_attached,) = _struct_10B.unpack(str[start:end])
      self.Hokuyo_attached = bool(self.Hokuyo_attached)
      self.PTZcam_attached = bool(self.PTZcam_attached)
      self.REARcam_attached = bool(self.REARcam_attached)
      self.SSC32board_attached = bool(self.SSC32board_attached)
      self.frontBumper_attached = bool(self.frontBumper_attached)
      self.backBumper_attached = bool(self.backBumper_attached)
      self.Encoder_left_attached = bool(self.Encoder_left_attached)
      self.Encoder_right_attached = bool(self.Encoder_right_attached)
      self.Voltage_attached = bool(self.Voltage_attached)
      self.IR_attached = bool(self.IR_attached)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10B = struct.Struct("<10B")
